extends jsx

# General
snippet CL "console.log" A
console.log($1)
endsnippet

snippet CE "console.error" A
console.error($1)
endsnippet

snippet IMP "Import module" A
import { $2 } from "$1"
endsnippet

snippet THEN "Then chain" A
.then(($1) => { $2 })
endsnippet

snippet CTT "Catch chain" A
.catch(($1) => { $2 })
endsnippet

snippet ARR "Arrow function" A
($1) => {$2}
endsnippet

snippet CARR "Constant arrow function" A
const $1 = ($2) => {$3}
endsnippet

# Testing
snippet ITESTS "Import Tests" A
import React from "react";
import { render, fireEvent } from "@testing-library/react";
$3
endsnippet 

snippet TEST "Test block" A
describe("$1", () => {
  it("Should $2", () => {
  });
});
endsnippet

snippet SHOULD "It block for vitest" A
it("Should $1", async () => {
	$2
})
endsnippet

snippet DESCRIBE "Describe block for vitest" A
describe("$1", () => {
	$2
})
endsnippet

# React
snippet SHOOK "useState hook" A
const [$1, set${1/\w+/\u$0/g}] = useState($2)
endsnippet

snippet IMR "Import React" A
import React from "react";
endsnippet

snippet EHOOK "useEffect" A
useEffect(() => {
  $1
})${0:;}
endsnippet

snippet FCE "function component export (with prop interface)" A

const ${1:`!v expand('%:t:r')`} = (${2:props}) => {
	return (
		<>
			${4:null}
		</>
	)
}

export default $1;

endsnippet

snippet CCE "class component export" A
import React from "react";

class ${1:`!v expand('%:t:r')`} extends React.Component<${1:`!v expand('%:t:r')`}Props> {
	render(){
		return (
			<>
				${2:null}
			</>
		)
	}
}


export default ${1:`!v expand('%:t:r')`};
endsnippet

snippet EXPRESS "basic express server" A
const express = require('express');
const path = require('path');
const app = express();

const PORT = 3000;

app.get('/', (req, res) => {
  res.status(200).sendFile(path.resolve(__dirname, 'client', 'index.html'));
});

app.listen(PORT, () => {
  console.log(\`App listening on port ${PORT}\`);
});
endsnippet

snippet APOLLO "Create basic apollo-server" A
const { ApolloServer } = require('apollo-server');
const resolvers = require('./resolvers');
const typeDefs = require('./typeDefs');

const server = new ApolloServer({ typeDefs, resolvers });

const PORT = process.env.PORT;

server.listen(PORT).then(() => {
	console.log(\`ðŸš€ Apollo listening on port ${process.env.PORT}\`);
});

endsnippet
